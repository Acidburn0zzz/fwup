# Sample firmware update config file

# Don't run if using a firmware update version less than 0.1
require-fwupdate-version = 0.1

# Define the Flash memory layout
define(BOOT_PART_OFFSET, 123)
define(BOOT_PART_COUNT, 100)
define(ROOTFS_A_PART_OFFSET, 456)
define(ROOTFS_A_PART_COUNT, 100)
define(ROOTFS_B_PART_OFFSET, 789)
define(ROOTFS_B_PART_COUNT, 100)
define(APP_PART_OFFSET, 101112)
define(APP_PART_COUNT, 200)

# Firmware metadata
meta-product = "Foo firmware"
meta-description = "Firmware update for Foo"
meta-version = 1.0
meta-author = "LKC Technologies, Inc."
meta-creation-date = ${NOW}

file-resource zImage {
	host-path = "path/to/zImage"
}

file-resource rootfs.ext2 {
	host-path = "path/to/rootfs.ext2"
}

file-resource config.txt {
	host-path = "path/to/config.txt"
}

mbr-resource mbr-a {
	bootstrap-code-path = "path/to/bootstrap-data"

	partition 0 {
                offset = ${BOOT_PART_OFFSET}
                count = ${BOOT_PART_COUNT}
		type = 0x1 # FAT
	}
	partition 1 {
                offset = ${ROOTFS_A_PART_OFFSET}
                count = ${ROOTFS_A_PART_COUNT}
		type = 0x83 # Linux
	}
	partition 2 {
                offset = ${ROOTFS_B_PART_OFFSET}
                count = ${ROOTFS_B_PART_COUNT}
		type = 0x83 # Linux
	}
	partition 3 {
                offset = ${APP_PART_OFFSET}
                count = ${APP_PART_COUNT}
		type = 0x83 # Linux
	}
}

mbr-resource mbr-b {
	bootstrap-code-path = "path/to/bootstrap-data"

	partition 0 {
                offset = ${BOOT_PART_OFFSET}
                count = ${BOOT_PART_COUNT}
		type = 0x1 # FAT
	}
	partition 1 {
                offset = ${ROOTFS_B_PART_OFFSET}
                count = ${ROOTFS_B_PART_COUNT}
		type = 0x83 # Linux
	}
	partition 2 {
                offset = ${ROOTFS_A_PART_OFFSET}
                count = ${ROOTFS_A_PART_COUNT}
		type = 0x83 # Linux
	}
	partition 3 {
                offset = ${APP_PART_OFFSET}
                count = ${APP_PART_COUNT}
		type = 0x83 # Linux
	}
}

fatfs-resource boot-partition {
	fat-type = 12 # FAT-12

	file config.txt {
		resource = config.txt
		permissions = 0 # not sure - readonly, etc.?
	}

	file another.txt {
		resource = another.txt
		permissions = 0 # not sure - readonly, etc.?
	}
}

fw-resource finalize-a.fw {
	# This firmware gets applied right before reboot after
	# the "a" partition is programmed.
	update on-reboot {
		on-init {
                        fat_mv(${BOOT_PART_OFFSET}, "zImage", "zImage.pre")
                        fat_mv(${BOOT_PART_OFFSET}, "zImage.new", "zImage")
		}
		on-resource mbr-a {
                        raw_write(0)
		}
	}
}

fw-resource finalize-b.fw {
	# This firmware gets applied right before reboot after
	# the "b" partition is programmed.
	update on-reboot {
		on-init {
                        fat_mv(${BOOT_PART_OFFSET}, "zImage", "zImage.pre")
                        fat_mv(${BOOT_PART_OFFSET}, "zImage.new", "zImage")
		}

		on-resource mbr-b {
                        raw_write(0)
		}
	}
}

# This firmware update writes everything to the destination media
update complete {
	# Only match if not mounted
	require-unmounted-destination = true

	on-init {
	}

	on-resource mbr-a {
		# copy resource to offset 0
                raw_write(0)
	}

	on-resource boot-partition {
		# copy resource to offset of first partition 
                raw_write(${BOOT_PART_OFFSET})
	}

	on-resource zImage {
		verify-on-the-fly = true

		# write to the fat partition
                fat_write(${BOOT_PART_OFFSET}, "zImage")
	}

	on-resource rootfs.ext2 {
		verify-on-the-fly = true

		# write to the first rootfs partition
                raw_write(${ROOTFS_A_PART_OFFSET})
	}

	on-finish {
	}
}

update upgrade {
	# This update upgrades the A partition
        require-partition1-offset = ${ROOTFS_B_PART_OFFSET}

	on-init {
                fat_rm(${BOOT_PART_OFFSET}, "zImage.pre")
	}

	on-resource zImage {
		verify-on-the-fly = true
		# write to the fat partition
                fat_write(${BOOT_PART_OFFSET}, "zImage.new")
	}

	on-resource rootfs.ext2 {
		verify-on-the-fly = true
		# write to the first rootfs partition
                raw_write(${ROOTFS_A_PART_OFFSET})
	}

	on-resource finalize-a.fw {
		# Until this .fw is run, the system will still boot to the old firmware
		fs_write("/tmp/finalize.fw")
	}

	on-finish {
	}

	on-error {
		# Clean up in case something goes wrong
                fat_rm(${BOOT_PART_OFFSET}, "zImage.new")
                fat_rm(${BOOT_PART_OFFSET}, "/tmp/finalize.fw")
	}
}

update upgrade {
	# This update upgrades the B partition
        require-partition1-offset = ${ROOTFS_A_PART_OFFSET}

	on-init {
                fat_rm(${BOOT_PART_OFFSET}, "zImage.pre")
	}

	on-resource zImage {
		verify-on-the-fly = true
		# write to the fat partition
                fat_write(${BOOT_PART_OFFSET}, "zImage.new")
	}

	on-resource rootfs.ext2 {
		verify-on-the-fly = true
		# write to the first rootfs partition
                raw_write(${ROOTFS_B_PART_OFFSET})
	}

	on-resource finalize-b.fw {
		# Until this .fw is run, the system will still boot to the old firmware
		fs_write("/tmp/finalize.fw")
	}

	on-finish {
	}
}

