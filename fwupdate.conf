# Sample firmware update config file

# Don't run if using a firmware update version less than 0.1
require-fwupdate-version = 0.1

define(FINALIZE_FW, "/tmp/finalize.fw")

# Define the Flash memory layout
define(BOOT_PART_OFFSET, 123)
define(BOOT_PART_COUNT, 100)
define(ROOTFS_A_PART_OFFSET, 456)
define(ROOTFS_A_PART_COUNT, 100)
define(ROOTFS_B_PART_OFFSET, 789)
define(ROOTFS_B_PART_COUNT, 100)
define(APP_PART_OFFSET, 101112)
define(APP_PART_COUNT, 200)

# Firmware metadata
meta-product = "Foo firmware"
meta-description = "Firmware update for Foo"
meta-version = 1.0
meta-author = "LKC Technologies, Inc."
meta-creation-date = ${NOW}

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource config.txt {
        host-path = "testdata/config.txt"
}

file-resource bootcode.bin {
        host-path = "testdata/bootcode.bin"
}

file-resource start.elf {
        host-path = "testdata/start.elf"
}

file-resource fixup.dat {
        host-path = "testdata/fixup.dat"
}

file-resource zImage {
        host-path = "testdata/zImage"
}

file-resource rootfs.ext2 {
        host-path = "testdata/rootfs.ext2"
}

mbr mbr-a {
	bootstrap-code-path = "path/to/bootstrap-data"

	partition 0 {
                block-offset = ${BOOT_PART_OFFSET}
                block-count = ${BOOT_PART_COUNT}
                type = 0x1 # FAT12
	}
	partition 1 {
                block-offset = ${ROOTFS_A_PART_OFFSET}
                block-count = ${ROOTFS_A_PART_COUNT}
		type = 0x83 # Linux
	}
	partition 2 {
                block-offset = ${ROOTFS_B_PART_OFFSET}
                block-count = ${ROOTFS_B_PART_COUNT}
		type = 0x83 # Linux
	}
	partition 3 {
                block-offset = ${APP_PART_OFFSET}
                block-count = ${APP_PART_COUNT}
		type = 0x83 # Linux
	}
}

mbr mbr-b {
        bootstrap-code-path = ""

	partition 0 {
                block-offset = ${BOOT_PART_OFFSET}
                block-count = ${BOOT_PART_COUNT}
                type = 0x1 # FAT12
	}
	partition 1 {
                block-offset = ${ROOTFS_B_PART_OFFSET}
                block-count = ${ROOTFS_B_PART_COUNT}
		type = 0x83 # Linux
	}
	partition 2 {
                block-offset = ${ROOTFS_A_PART_OFFSET}
                block-count = ${ROOTFS_A_PART_COUNT}
		type = 0x83 # Linux
	}
	partition 3 {
                block-offset = ${APP_PART_OFFSET}
                block-count = ${APP_PART_COUNT}
		type = 0x83 # Linux
	}
}

# This firmware update writes everything to the destination media
update complete {
	# Only match if not mounted
	require-unmounted-destination = true

        # Everything that gets written can be verified on the fly.
        # This speeds things up, since we don't care about detecting
        # errors before data gets written.
        verify-on-the-fly = true

        on-init {
                mbr_write(mbr-a)
                fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
        }

        on-resource config.txt { fat_write(${BOOT_PART_OFFSET}, "config.txt") }
        on-resource bootcode.bin { fat_write(${BOOT_PART_OFFSET}, "bootcode.bin") }
        on-resource start.elf { fat_write(${BOOT_PART_OFFSET}, "start.elf") }
        on-resource fixup.dat { fat_write(${BOOT_PART_OFFSET}, "fixup.dat") }
        on-resource zImage { fat_write(${BOOT_PART_OFFSET}, "zImage") }

	on-resource rootfs.ext2 {
		# write to the first rootfs partition
                raw_write(${ROOTFS_A_PART_OFFSET})
	}

	on-finish {
	}
}

update upgrade {
	# This update upgrades the A partition
        require-partition1-offset = ${ROOTFS_B_PART_OFFSET}

        # Since the upgrade won't run until it has been finalized, it's ok
        # to write data as it is read.
        verify-on-the-fly = true

	on-init {
	}

	on-resource zImage {
                fat_rm(${BOOT_PART_OFFSET}, "zImage.pre")

                # write to the fat partition
                fat_write(${BOOT_PART_OFFSET}, "zImage.new")
	}

	on-resource rootfs.ext2 {
		# write to the first rootfs partition
                raw_write(${ROOTFS_A_PART_OFFSET})
	}

        on-finish {
            # Until this .fw is run, the system will still boot to the old firmware
            fw_create(${FINALIZE_FW})
            # Add an empty file to flag mbr-a to be written
            fw_add_local_file(${FINALIZE_FW}, "write.mbr-a", "/dev/null")
        }

	on-error {
		# Clean up in case something goes wrong
                fat_rm(${BOOT_PART_OFFSET}, "zImage.new")
                fat_rm(${BOOT_PART_OFFSET}, ${FINALIZE_FW})
        }
}

update upgrade {
	# This update upgrades the B partition
        require-partition1-offset = ${ROOTFS_A_PART_OFFSET}

        # Since the upgrade won't run until it has been finalized, it's ok
        # to write data as it is read.
        verify-on-the-fly = true

	on-init {
	}

	on-resource zImage {
                fat_rm(${BOOT_PART_OFFSET}, "zImage.pre")

                # write to the fat partition
                fat_write(${BOOT_PART_OFFSET}, "zImage.new")
	}

	on-resource rootfs.ext2 {
		# write to the first rootfs partition
                raw_write(${ROOTFS_B_PART_OFFSET})
	}

	on-finish {
            # Until this .fw is run, the system will still boot to the old firmware
            fw_create(${FINALIZE_FW})
            # Add an empty file to flag mbr-b to be written
            fw_add_local_file(${FINALIZE_FW}, "write.mbr-b", "/dev/null")
        }

        on-error {
                # Clean up in case something goes wrong
                fat_rm(${BOOT_PART_OFFSET}, "zImage.new")
                fat_rm(${BOOT_PART_OFFSET}, ${FINALIZE_FW})
        }
}

# This action is intended to be called from ${FINALIZE_FW} after the "upgrade" task
# has been run. It requires the "write.mbr-a" or "write.mbr-b" resources to exist
# and those don't exist until the "upgrade" task makes them.
update on-reboot {
    on-resource write.mbr-a {
            mbr_write(mbr-a)
    }
    on-resource write.mbr-b {
            mbr_write(mbr-b)
    }
    on-finish {
            fat_mv(${BOOT_PART_OFFSET}, "zImage", "zImage.pre")
            fat_mv(${BOOT_PART_OFFSET}, "zImage.new", "zImage")
    }
}

